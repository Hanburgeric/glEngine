#include "_Primitive.h"

Primitive::Primitive() {}
Primitive::~Primitive(){ }

void Primitive::init(BufferIO& bi, int indices, int material, int position, int normal,
	int tangent, int n_texCoord, int (&texcoord)[MAX_ATTRIBUTE_SEMANTICS],
	int n_color, int (&color)[MAX_ATTRIBUTE_SEMANTICS],
	int n_joints, int (&joints)[MAX_ATTRIBUTE_SEMANTICS],
	int n_weights, int (&weights)[MAX_ATTRIBUTE_SEMANTICS], int mode) {
	this->set_n_texCoord(n_texCoord);
	this->set_n_color(n_color);
	this->set_n_joints(n_joints);
	this->set_n_weights(n_weights);
	this->setIndices(bi, indices);
	this->setPosition(bi, position);
	this->setNormal(bi, normal);
	this->setTangent(bi, tangent);
	this->setTexcoord(bi, texcoord);
	this->setColor(bi, color);
	this->setJoints(bi, joints);
	this->setWeights(bi, weights);
    this->setMode(mode);
}

void Primitive::set_n_texCoord(int n) {
	this->n_texCoord = n;
}

void Primitive::set_n_color(int n) {
	this->n_color = n;
}

void Primitive::set_n_joints(int n) {
	this->n_joints = n;
}

void Primitive::set_n_weights(int n) {
	this->n_weights = n;
}

int Primitive::get_n_texCoord() const {
	return this->n_texCoord;
}

int Primitive::get_n_color() const {
	return this->n_color;
}

int Primitive::get_n_joints() const {
	return this->n_joints;
}

int Primitive::get_n_weights() const {
	return this->n_weights;
}

void Primitive::setIndices(BufferIO& bi, int indices) {
	if (indices >= 0) {
        std::cout<<"Indices : "<<indices<<std::endl;
        //So the problem is _USHORT of _UINT
        if(bi.getAccessor(indices).getComponentType() == GL_UNSIGNED_INT){
          _UINT tmp[MAX_ELEMENT_LENGTH] = { 0U };
          bi.loadFromAccessor(tmp, indices);
          this->n_indices = bi.getAccessor(indices).getCount();
          std::cout<<"n_indices : "<<this->n_indices<<std::endl;
          for (int i = 0; i < this->n_indices; i++) {
            this->indices[i] = static_cast<_UINT>(tmp[i]);
          }
        }
      else if(bi.getAccessor(indices).getComponentType() == GL_UNSIGNED_SHORT){
        _USHORT tmp[MAX_ELEMENT_LENGTH] = { 0U };
        bi.loadFromAccessor(tmp, indices);
        this->n_indices = bi.getAccessor(indices).getCount();
        std::cout<<"n_indices : "<<this->n_indices<<std::endl;
        for (int i = 0; i < this->n_indices; i++) {
          this->indices[i] = static_cast<_UINT>(tmp[i]);
        }
      }
      else{
        std::cout<<"Wrong Datatype for Indices"<<std::endl;
      }
	}
}

_UINT (&Primitive::getIndices())[MAX_POINTS]{
	return this->indices;
}

void Primitive::setPosition(BufferIO& bi, int pos) {
	if (pos >= 0) {
		glm::vec3 tmp[MAX_ELEMENT_LENGTH];
		bi.loadFromAccessor(tmp, pos);
		this->n_points = bi.getAccessor(pos).getCount();
		for (int i = 0; i < this->n_points; i++) {
			this->position[i] = tmp[i];
//			std::cout << glm::to_string(tmp[i]) << " ";
		}
//		std::cout << "\n\n";
	}
}

int Primitive::get_n_points() const {
	return this->n_points;
}

int Primitive::get_n_indices() const {
	return this->n_indices;
}

glm::vec3 (&Primitive::getPosition())[MAX_POINTS]{
	return this->position;
}

void Primitive::setNormal(BufferIO& bi, int nor) {
	if (nor >= 0) {
		glm::vec3 tmp[MAX_ELEMENT_LENGTH];
		bi.loadFromAccessor(tmp, nor);
		for (int i = 0; i < bi.getAccessor(nor).getCount(); i++) {
			this->normal[i] = tmp[i];
//			std::cout << glm::to_string(tmp[i]) << " ";
		}
//		std::cout << "\n\n";
	}
}

glm::vec3 (&Primitive::getNormal())[MAX_POINTS]{
	return this->normal;
}

void Primitive::setTangent(BufferIO& bi, int tangent) {
	if (tangent >= 0) {
		glm::vec4 tmp[MAX_ELEMENT_LENGTH];
		bi.loadFromAccessor(tmp, tangent);
		for (int i = 0; i < bi.getAccessor(tangent).getCount(); i++) {
			this->tangent[i] = tmp[i];
//			std::cout << glm::to_string(tmp[i]) << " ";
		}
//		std::cout << "\n\n";
	}
}

glm::vec4 (&Primitive::getTangent())[MAX_POINTS]{
	return this->tangent;
}

void Primitive::setTexcoord(BufferIO& bi, int (&tex)[MAX_ATTRIBUTE_SEMANTICS]) {
	for (int i = 0; i < this->get_n_texCoord(); i++) {
		std::cout << tex[i] << std::endl;
		if (tex[i] >= 0) {
			glm::vec2 tmp[MAX_ELEMENT_LENGTH];
			bi.loadFromAccessor(tmp, tex[i]);
			for (int j = 0; j < bi.getAccessor(tex[j]).getCount(); j++) {
				this->texcoord[i][j] = tmp[j];
//				std::cout << glm::to_string(tmp[i]) << " ";
			}
//			std::cout << "\n\n";
		}
		else {
			break;
		}
	}
}

glm::vec2 (&Primitive::getTexcoord())[MAX_ATTRIBUTE_SEMANTICS][MAX_POINTS]{
	return this->texcoord;
}

void Primitive::setColor(BufferIO& bi, int (&color)[MAX_ATTRIBUTE_SEMANTICS]) {
	for (int i = 0; i < this->get_n_color(); i++) {
		if (color[i] >= 0) {
			glm::vec4 tmp[MAX_ELEMENT_LENGTH];
			bi.loadFromAccessor(tmp, color[i]);
			for (int j = 0; j < bi.getAccessor(color[j]).getCount(); j++) {
				this->color[i][j] = tmp[j];
//				std::cout << glm::to_string(tmp[i]) << " ";
			}
//			std::cout << "\n\n";
		}
		else {
			break;
		}
	}
}

glm::vec4 (&Primitive::getColor())[MAX_ATTRIBUTE_SEMANTICS][MAX_POINTS]{
	return this->color;
}

void Primitive::setJoints(BufferIO& bi, int (&joints)[MAX_ATTRIBUTE_SEMANTICS]) {
	for (int i = 0; i < this->get_n_joints(); i++) {
		if (joints[i] >= 0) {
			glm::vec4 tmp[MAX_ELEMENT_LENGTH];
			bi.loadFromAccessor(tmp, joints[i]);
			for (int j = 0; j < bi.getAccessor(joints[j]).getCount(); j++) {
				this->joints[i][j] = tmp[j];
//				std::cout << glm::to_string(tmp[i]) << " ";
			}
//			std::cout << "\n\n";
		}
		else {
			break;
		}
	}
}

glm::vec4 (&Primitive::getJoints())[MAX_ATTRIBUTE_SEMANTICS][MAX_POINTS]{
	return this->joints;
}

void Primitive::setWeights(BufferIO& bi, int (&weights)[MAX_ATTRIBUTE_SEMANTICS]) {
	for (int i = 0; i < this->get_n_weights(); i++) {
		if (weights[i] >= 0) {
			glm::vec4 tmp[MAX_ELEMENT_LENGTH];
			bi.loadFromAccessor(tmp, weights[i]);
			for (int j = 0; j < bi.getAccessor(weights[j]).getCount(); j++) {
				this->weights[i][j] = tmp[j];
//				std::cout << glm::to_string(tmp[i]) << " ";
			}
//			std::cout << "\n\n";
		}
		else {
			break;
		}
	}
}

glm::vec4 (&Primitive::getWeights())[MAX_ATTRIBUTE_SEMANTICS][MAX_POINTS]{
	return this->weights;
}

void Primitive::setMode(int mode) {
  this->mode = mode;
}

int Primitive::getMode() const{
  return this->mode;
}

void Primitive::print() const {
  for(int i = 0; i < this->n_points; i++){
    _cout_("Position["+ std::to_string(i)+"] : "+glm::to_string(this->position[i]));
  }
  for(int i = 0; i < this->n_indices; i++){
    _cout_("Index["+ std::to_string(i)+"] : "+std::to_string(this->indices[i]));
  }
}